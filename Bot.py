import asyncio
import random
from telegram import Update, ChatPermissions
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.error import BadRequest

# –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_API_TOKEN' –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –æ—Ç @BotFather
API_TOKEN = '7561063983:AAFVetZjfYBIrCvdwpRdnBor0QVBl84GY94'

# –ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞ (–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥ —Å–µ–±—è)
CHAT_RULES = """
–ü—Ä–∏–≤–µ—Ç –Ω–æ–≤–∏—á–æ–∫

üóì –ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞

1. –ú–∞—Å—Ç–µ—Ä –®–∏–ø (–∞–≤—Ç–æ—Ä) –µ—Å—Ç—å –∑–∞–∫–æ–Ω. –û–Ω –±—É–¥–µ—Ç –∫–∞—Ä–∞—Ç—å –∏ –º–∏–ª–æ–≤–∞—Ç—å –ø–æ —Å–æ–≤–µ—Ç–∞–º –∑–≤—ë–∑–¥ –∏ –º–∞–ª–æ, –∫—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–µ–¥—É–≥–∞–¥–∞—Ç—å –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.
2. –ò–Ω–∫–≤–∏–∑–∏—Ü–∏—è –Ω–µ –¥—Ä–µ–º–ª–µ—Ç. –ó–∞–ø—Ä–µ—â–µ–Ω–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—Ç—å –Ω–µ–ø—Ä–∏—Å—Ç–æ–π–Ω—ã–µ, –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –∏ —à–æ–∫–∏—Ä—É—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (–ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ —á–∞—Ç 12+, –∫–∞–∫ –≤ –º—É–ª—å—Ç–∏–∫–∞—Ö –î–∏—Å–Ω–µ–π). 
3. –í—Å–µ —Ä–∞–≤–Ω—ã, –Ω–æ –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ. –ë—É–¥—å—Ç–µ —Ä–∞—Å—Å—É–¥–∏—Ç–µ–ª—å–Ω—ã –∏ –≤–µ–¥–∏—Ç–µ –¥–∏—Å–∫—É—Å—Å–∏–∏ –ø–æ—Ä—è–¥–æ—á–Ω–æ, –∞ —Ç–∞–∫ –∂–µ –Ω–µ –æ–±—Å—É–∂–¥–∞–π—Ç–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ–ª–∏—Ç–∏–∫—É - —ç—Ç–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Å–ø–æ—Ä.
4. –ß–µ—Ç—ã—Ä–µ —Ä–∞–≤–Ω–æ —Ç—Ä–∏.
–°–ª–∞–≤–∞ –ö–∞—à—Ç–∞–Ω—É! üå∞üêÄ
"""

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º—É—Ç–æ–≤ (user_id: unmute_time)
MUTED_USERS = {}

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
async def welcome_new_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    for new_member in update.message.new_chat_members:
        if new_member.is_bot:
            continue
            
        welcome_text = f"""
üå∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {new_member.first_name}!

–¢—ã –ø–æ–ø–∞–ª –≤ –ß–∞—Å—Ç–Ω—ã–π –ß–∞—Å—Ç–Ω—ã–π –ß–∞—Ç! 
–ó–¥–µ—Å—å —Å—Ç—Ä–∞–∂–¥—É—â–∏–µ –∏ –∂–∞–∂–¥—É—â–∏–µ –æ–±—â–µ–Ω–∏—è!

{CHAT_RULES}

–†–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å—Ä–µ–¥–∏ –æ—Ä–µ—Ö–æ–≤—ã—Ö –¥—É—à! üéâ
        """
        
        await update.message.reply_text(welcome_text)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.message.from_user.first_name
    await update.message.reply_text(
        f"üå∞ –ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –°—Ç—Ä–∞–∂ –∫–∞—à—Ç–∞–Ω–∞ - —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å —ç—Ç–æ–≥–æ —á–∞—Ç–∞!\n\n"
        f"–Ø —Å–ª–µ–∂—É –∑–∞ –ø–æ—Ä—è–¥–∫–æ–º –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n"
        f"–ù–∞–ø–∏—à–∏ /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã."
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üå∞ –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –°—Ç—Ä–∞–∂–∞ –∫–∞—à—Ç–∞–Ω–∞:

üëÆ‚Äç‚ôÇÔ∏è –ö–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤):
/mute @username –≤—Ä–µ–º—è_–≤_–º–∏–Ω—É—Ç–∞—Ö [–ø—Ä–∏—á–∏–Ω–∞] - –≤—ã–¥–∞—Ç—å –º—É—Ç
/unmute @username - —Å–Ω—è—Ç—å –º—É—Ç
/mutelist - —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö

üìú –ü—Ä–∞–≤–∏–ª–∞:
/rules - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞

‚öîÔ∏è –î—É—ç–ª—å:
/duel @username - –≤—ã–∑–≤–∞—Ç—å –Ω–∞ –¥—É—ç–ª—å

üéØ –ü—Ä–æ—á–∏–µ:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

–°–ª—É–∂—É –æ—Ä–µ—Ö–æ–≤–æ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É! üå∞
    """
    await update.message.reply_text(help_text)

# –ö–æ–º–∞–Ω–¥–∞ /rules - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞
async def rules_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(CHAT_RULES)

# –ö–æ–º–∞–Ω–¥–∞ /mute - –≤—ã–¥–∞—Ç—å –º—É—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤)
async def mute_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    user = update.message.from_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    if not await is_user_moderator(update, context, user.id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –≤—ã–¥–∞–≤–∞—Ç—å –º—É—Ç!")
        return
    
    if not context.args or len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /mute @username –≤—Ä–µ–º—è_–≤_–º–∏–Ω—É—Ç–∞—Ö [–ø—Ä–∏—á–∏–Ω–∞]")
        return
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    target_username = context.args[0].replace('@', '')
    try:
        mute_minutes = int(context.args[1])
        reason = ' '.join(context.args[2:]) if len(context.args) > 2 else "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —á–∞—Ç–∞"
    except ValueError:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö!")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        chat_member = await context.bot.get_chat_member(chat_id, target_username)
        target_user = chat_member.user
        
        # –í—ã–¥–∞–µ–º –º—É—Ç
        until_date = int(asyncio.get_event_loop().time()) + (mute_minutes * 60)
        await context.bot.restrict_chat_member(
            chat_id=chat_id,
            user_id=target_user.id,
            permissions=ChatPermissions(
                can_send_messages=False,
                can_send_media_messages=False,
                can_send_other_messages=False,
                can_add_web_page_previews=False
            ),
            until_date=until_date
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º—É—Ç–µ
        MUTED_USERS[target_user.id] = until_date
        
        await update.message.reply_text(
            f"üîá –°—Ç—Ä–∞–∂ –∫–∞—à—Ç–∞–Ω–∞ –≤—ã–¥–∞–ª –º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{target_username} –Ω–∞ {mute_minutes} –º–∏–Ω—É—Ç.\n"
            f"üå∞ –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            f"–°–æ–±–ª—é–¥–∞–π—Ç–µ –æ—Ä–µ—Ö–æ–≤—É—é –≥–∞—Ä–º–æ–Ω–∏—é! üö´"
        )
        
    except BadRequest as e:
        if "user not found" in str(e).lower():
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–∞—Ç–µ!")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –º—É—Ç–∞!")
    except Exception as e:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")

# –ö–æ–º–∞–Ω–¥–∞ /unmute - —Å–Ω—è—Ç—å –º—É—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤)
async def unmute_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    user = update.message.from_user
    
    if not await is_user_moderator(update, context, user.id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–Ω–∏–º–∞—Ç—å –º—É—Ç!")
        return
    
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /unmute @username")
        return
    
    target_username = context.args[0].replace('@', '')
    
    try:
        chat_member = await context.bot.get_chat_member(chat_id, target_username)
        target_user = chat_member.user
        
        # –°–Ω–∏–º–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        await context.bot.restrict_chat_member(
            chat_id=chat_id,
            user_id=target_user.id,
            permissions=ChatPermissions(
                can_send_messages=True,
                can_send_media_messages=True,
                can_send_other_messages=True,
                can_add_web_page_previews=True
            )
        )
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –º—É—Ç–æ–≤
        if target_user.id in MUTED_USERS:
            del MUTED_USERS[target_user.id]
        
        await update.message.reply_text(
            f"üå∞ –°—Ç—Ä–∞–∂ –∫–∞—à—Ç–∞–Ω–∞ —Å–Ω—è–ª –º—É—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{target_username}!\n"
            f"–°–Ω–æ–≤–∞ –º–æ–∂–Ω–æ —â–µ–ª–∫–∞—Ç—å –∫–∞—à—Ç–∞–Ω—ã! ‚úÖ"
        )
        
    except BadRequest:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–∞—Ç–µ!")
    except Exception:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")

# –ö–æ–º–∞–Ω–¥–∞ /mutelist - —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤)
async def mutelist_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_user_moderator(update, context, update.message.from_user.id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫!")
        return
    
    if not MUTED_USERS:
        await update.message.reply_text("üå∞ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –º—É—Ç–µ! –û—Ä–µ—Ö–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫! ‚úÖ")
        return
    
    mute_list = "üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –º—É—Ç–µ:\n\n"
    
    for user_id, unmute_time in MUTED_USERS.items():
        try:
            user = await context.bot.get_chat_member(update.message.chat_id, user_id)
            time_left = int(unmute_time - asyncio.get_event_loop().time())
            minutes_left = max(0, time_left // 60)
            
            mute_list += f"üë§ @{user.user.username} - –æ—Å—Ç–∞–ª–æ—Å—å {minutes_left} –º–∏–Ω—É—Ç\n"
        except:
            mute_list += f"üë§ ID {user_id} - –æ—Å—Ç–∞–ª–æ—Å—å {minutes_left} –º–∏–Ω—É—Ç\n"
    
    await update.message.reply_text(mute_list)

# –ú–∏–Ω–∏-–∏–≥—Ä–∞ –¥—É—ç–ª—å
async def duel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: /duel @username")
        return
    
    target_username = context.args[0].replace('@', '')
    challenger = update.message.from_user
    
    # –ü—Ä–æ—Å—Ç–∞—è –¥—É—ç–ª—å —Å random
    winner = random.choice([challenger.first_name, target_username])
    weapons = ["–∫–∞—à—Ç–∞–Ω–æ–º", "–æ—Ä–µ—Ö–æ–º", "—Å–∫–æ—Ä–ª—É–ø–æ–π", "–≤–µ—Ç–∫–æ–π"]
    weapon = random.choice(weapons)
    
    await update.message.reply_text(
        f"‚öîÔ∏è {challenger.first_name} –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–∞ –¥—É—ç–ª—å @{target_username}!\n\n"
        f"üå∞ –î—É—ç–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫–∏ —Å—Ä–∞–∂–∞—é—Ç—Å—è {weapon}!\n\n"
        f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner}!\n"
        f"–°–ª–∞–≤–∞ –æ—Ä–µ—Ö–æ–≤–æ–º—É –≥–µ—Ä–æ—é! üëë"
    )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
async def is_user_moderator(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> bool:
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º user_id –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    # –ù–∞–ø—Ä–∏–º–µ—Ä: return user_id in [123456789, 987654321]
    
    # –ò–ª–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø—Ä–∞–≤–∞ –≤ —á–∞—Ç–µ (–∞–¥–º–∏–Ω/—Å–æ–∑–¥–∞—Ç–µ–ª—å)
    chat_id = update.message.chat_id
    try:
        chat_member = await context.bot.get_chat_member(chat_id, user_id)
        return chat_member.status in ['administrator', 'creator']
    except:
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}')

def main():
    # –°–æ–∑–¥–∞–µ–º Application –æ–±—ä–µ–∫—Ç
    application = Application.builder().token(API_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    application.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome_new_member))

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler('start', start_command))
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(CommandHandler('rules', rules_command))
    application.add_handler(CommandHandler('mute', mute_command))
    application.add_handler(CommandHandler('unmute', unmute_command))
    application.add_handler(CommandHandler('mutelist', mutelist_command))
    application.add_handler(CommandHandler('duel', duel_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print('üå∞ –°—Ç—Ä–∞–∂ –∫–∞—à—Ç–∞–Ω–∞ –∑–∞–ø—É—â–µ–Ω! ü§ñ')
    print('–§—É–Ω–∫—Ü–∏–∏: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –º—É—Ç/–∞–Ω–º—É—Ç, –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞, –¥—É—ç–ª—å')
    application.run_polling()

if __name__ == '__main__':
    main()
